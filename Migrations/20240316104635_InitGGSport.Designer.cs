// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ggsport.Infrastructure;

#nullable disable

namespace ggsport.Migrations
{
    [DbContext(typeof(GGSportContext))]
    [Migration("20240316104635_InitGGSport")]
    partial class InitGGSport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("ggsport.Authentication.Model.Entity.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user"
                        },
                        new
                        {
                            Id = 2,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("ggsport.Authentication.Model.Entity.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_confirmed");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("user");

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Email = "jounknown25@gmail.com",
                            IsEmailConfirmed = true,
                            Password = "AQAAAAIAAYagAAAAEIW4K7vlpfFbsxyP16AoSghbhHLy+NqYBhE/Hj7PxRlkIaTApku4+D9rVKGrLQlxcA==",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("ggsport.Domain.Client.ClubCardModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("club_card");
                });

            modelBuilder.Entity("ggsport.Domain.Course.CourseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("course");
                });

            modelBuilder.Entity("ggsport.Domain.Course.ExerciseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("decription");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("exercise");
                });

            modelBuilder.Entity("ggsport.Domain.Room.RoomModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("last_name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.ToTable("room");
                });

            modelBuilder.Entity("ggsport.Domain.Schedule.Model.Entity.ScheduleClient", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("trainer_id");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.HasKey("ClientId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("schedule_client");
                });

            modelBuilder.Entity("ggsport.Domain.Schedule.Model.Entity.ScheduleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndExercise")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_exercise");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartExercise")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_exercise");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("RoomId");

                    b.ToTable("schedule");
                });

            modelBuilder.Entity("ggsport.Domain.Schedule.Model.Entity.ScheduleTrainer", b =>
                {
                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.Property<int>("TrainerId")
                        .HasColumnType("integer")
                        .HasColumnName("trainer_id");

                    b.HasKey("ScheduleId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("schedule_trainer");
                });

            modelBuilder.Entity("ggsport.Domain.Trainer.TrainerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.HasKey("Id");

                    b.ToTable("trainer");
                });

            modelBuilder.Entity("ggsport.Domain.Client.ClientModel", b =>
                {
                    b.HasBaseType("ggsport.Authentication.Model.Entity.UserModel");

                    b.Property<int>("ClubCardId")
                        .HasColumnType("integer")
                        .HasColumnName("club_card_id");

                    b.HasIndex("ClubCardId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("ggsport.Domain.Manager.ManagerModel", b =>
                {
                    b.HasBaseType("ggsport.Authentication.Model.Entity.UserModel");

                    b.ToTable("manager");
                });

            modelBuilder.Entity("ggsport.Authentication.Model.Entity.UserModel", b =>
                {
                    b.HasOne("ggsport.Authentication.Model.Entity.RoleModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ggsport.Domain.Course.ExerciseModel", b =>
                {
                    b.HasOne("ggsport.Domain.Course.CourseModel", "Course")
                        .WithMany("Exercises")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ggsport.Domain.Schedule.Model.Entity.ScheduleClient", b =>
                {
                    b.HasOne("ggsport.Domain.Client.ClientModel", "Client")
                        .WithMany("ScheduleClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ggsport.Domain.Schedule.Model.Entity.ScheduleModel", "Schedule")
                        .WithMany("ScheduleClients")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ggsport.Domain.Schedule.Model.Entity.ScheduleModel", b =>
                {
                    b.HasOne("ggsport.Domain.Course.ExerciseModel", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ggsport.Domain.Room.RoomModel", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ggsport.Domain.Schedule.Model.Entity.ScheduleTrainer", b =>
                {
                    b.HasOne("ggsport.Domain.Schedule.Model.Entity.ScheduleModel", "Schedule")
                        .WithMany("ScheduleTrainers")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ggsport.Domain.Trainer.TrainerModel", "Trainer")
                        .WithMany("ScheduleTrainers")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("ggsport.Domain.Client.ClientModel", b =>
                {
                    b.HasOne("ggsport.Domain.Client.ClubCardModel", "ClubCard")
                        .WithMany()
                        .HasForeignKey("ClubCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ggsport.Authentication.Model.Entity.UserModel", null)
                        .WithOne()
                        .HasForeignKey("ggsport.Domain.Client.ClientModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubCard");
                });

            modelBuilder.Entity("ggsport.Domain.Manager.ManagerModel", b =>
                {
                    b.HasOne("ggsport.Authentication.Model.Entity.UserModel", null)
                        .WithOne()
                        .HasForeignKey("ggsport.Domain.Manager.ManagerModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ggsport.Domain.Course.CourseModel", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("ggsport.Domain.Schedule.Model.Entity.ScheduleModel", b =>
                {
                    b.Navigation("ScheduleClients");

                    b.Navigation("ScheduleTrainers");
                });

            modelBuilder.Entity("ggsport.Domain.Trainer.TrainerModel", b =>
                {
                    b.Navigation("ScheduleTrainers");
                });

            modelBuilder.Entity("ggsport.Domain.Client.ClientModel", b =>
                {
                    b.Navigation("ScheduleClients");
                });
#pragma warning restore 612, 618
        }
    }
}
